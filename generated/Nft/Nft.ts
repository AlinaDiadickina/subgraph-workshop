// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LevelDataSet extends ethereum.Event {
  get params(): LevelDataSet__Params {
    return new LevelDataSet__Params(this);
  }
}

export class LevelDataSet__Params {
  _event: LevelDataSet;

  constructor(event: LevelDataSet) {
    this._event = event;
  }

  get level(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get isGenesis(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get vestingRewardWOWTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lifecycleDuration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get extensionDuration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get allocationPerProject(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get supplyCap(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get baseURI(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class MaxLevelSet extends ethereum.Event {
  get params(): MaxLevelSet__Params {
    return new MaxLevelSet__Params(this);
  }
}

export class MaxLevelSet__Params {
  _event: MaxLevelSet;

  constructor(event: MaxLevelSet) {
    this._event = event;
  }

  get newMaxLevel(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NftDataActivated extends ethereum.Event {
  get params(): NftDataActivated__Params {
    return new NftDataActivated__Params(this);
  }
}

export class NftDataActivated__Params {
  _event: NftDataActivated;

  constructor(event: NftDataActivated) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get level(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get isGenesis(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get activityEndTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get extendedActivityEndTimestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NftDataSet extends ethereum.Event {
  get params(): NftDataSet__Params {
    return new NftDataSet__Params(this);
  }
}

export class NftDataSet__Params {
  _event: NftDataSet;

  constructor(event: NftDataSet) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get level(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get isGenesis(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get activityType(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get activityEndTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get extendedActivityEndTimestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NftMinted extends ethereum.Event {
  get params(): NftMinted__Params {
    return new NftMinted__Params(this);
  }
}

export class NftMinted__Params {
  _event: NftMinted;

  constructor(event: NftMinted) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get level(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get isGenesis(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get idInLevel(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ProjectsQuantitySet extends ethereum.Event {
  get params(): ProjectsQuantitySet__Params {
    return new ProjectsQuantitySet__Params(this);
  }
}

export class ProjectsQuantitySet__Params {
  _event: ProjectsQuantitySet;

  constructor(event: ProjectsQuantitySet) {
    this._event = event;
  }

  get level(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get isGenesis(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get project(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get quantity(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class PromotionalVestingPIDSet extends ethereum.Event {
  get params(): PromotionalVestingPIDSet__Params {
    return new PromotionalVestingPIDSet__Params(this);
  }
}

export class PromotionalVestingPIDSet__Params {
  _event: PromotionalVestingPIDSet;

  constructor(event: PromotionalVestingPIDSet) {
    this._event = event;
  }

  get newPID(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TotalProjectTypesSet extends ethereum.Event {
  get params(): TotalProjectTypesSet__Params {
    return new TotalProjectTypesSet__Params(this);
  }
}

export class TotalProjectTypesSet__Params {
  _event: TotalProjectTypesSet;

  constructor(event: TotalProjectTypesSet) {
    this._event = event;
  }

  get newCount(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VestingContractSet extends ethereum.Event {
  get params(): VestingContractSet__Params {
    return new VestingContractSet__Params(this);
  }
}

export class VestingContractSet__Params {
  _event: VestingContractSet;

  constructor(event: VestingContractSet) {
    this._event = event;
  }

  get newContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Nft__getLevelDataResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get vestingRewardWOWTokens(): BigInt {
    return this[1].toBigInt();
  }

  get lifecycleDuration(): BigInt {
    return this[2].toBigInt();
  }

  get extensionDuration(): BigInt {
    return this[3].toBigInt();
  }

  get allocationPerProject(): BigInt {
    return this[4].toBigInt();
  }

  get nftAmount(): BigInt {
    return this[5].toBigInt();
  }

  get supplyCap(): BigInt {
    return this[6].toBigInt();
  }

  get baseURI(): string {
    return this[7].toString();
  }
}

export class Nft__getNftDataResultValue0Struct extends ethereum.Tuple {
  get level(): i32 {
    return this[0].toI32();
  }

  get isGenesis(): boolean {
    return this[1].toBoolean();
  }

  get activityType(): i32 {
    return this[2].toI32();
  }

  get activityEndTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get extendedActivityEndTimestamp(): BigInt {
    return this[4].toBigInt();
  }
}

export class Nft extends ethereum.SmartContract {
  static bind(address: Address): Nft {
    return new Nft("Nft", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  NFT_DATA_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "NFT_DATA_MANAGER_ROLE",
      "NFT_DATA_MANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_NFT_DATA_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "NFT_DATA_MANAGER_ROLE",
      "NFT_DATA_MANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADER_ROLE(): Bytes {
    let result = super.call("UPGRADER_ROLE", "UPGRADER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPGRADER_ROLE",
      "UPGRADER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  WHITELISTED_SENDER_ROLE(): Bytes {
    let result = super.call(
      "WHITELISTED_SENDER_ROLE",
      "WHITELISTED_SENDER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_WHITELISTED_SENDER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "WHITELISTED_SENDER_ROLE",
      "WHITELISTED_SENDER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLevelData(
    level: i32,
    isGenesis: boolean,
  ): Nft__getLevelDataResultValue0Struct {
    let result = super.call(
      "getLevelData",
      "getLevelData(uint16,bool):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,string))",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(level)),
        ethereum.Value.fromBoolean(isGenesis),
      ],
    );

    return changetype<Nft__getLevelDataResultValue0Struct>(result[0].toTuple());
  }

  try_getLevelData(
    level: i32,
    isGenesis: boolean,
  ): ethereum.CallResult<Nft__getLevelDataResultValue0Struct> {
    let result = super.tryCall(
      "getLevelData",
      "getLevelData(uint16,bool):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,string))",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(level)),
        ethereum.Value.fromBoolean(isGenesis),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Nft__getLevelDataResultValue0Struct>(value[0].toTuple()),
    );
  }

  getMaxLevel(): i32 {
    let result = super.call("getMaxLevel", "getMaxLevel():(uint16)", []);

    return result[0].toI32();
  }

  try_getMaxLevel(): ethereum.CallResult<i32> {
    let result = super.tryCall("getMaxLevel", "getMaxLevel():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getNextTokenId(): BigInt {
    let result = super.call("getNextTokenId", "getNextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextTokenId",
      "getNextTokenId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNftData(tokenId: BigInt): Nft__getNftDataResultValue0Struct {
    let result = super.call(
      "getNftData",
      "getNftData(uint256):((uint16,bool,uint8,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return changetype<Nft__getNftDataResultValue0Struct>(result[0].toTuple());
  }

  try_getNftData(
    tokenId: BigInt,
  ): ethereum.CallResult<Nft__getNftDataResultValue0Struct> {
    let result = super.tryCall(
      "getNftData",
      "getNftData(uint256):((uint16,bool,uint8,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Nft__getNftDataResultValue0Struct>(value[0].toTuple()),
    );
  }

  getProjectsQuantity(level: i32, isGenesis: boolean, project: i32): i32 {
    let result = super.call(
      "getProjectsQuantity",
      "getProjectsQuantity(uint16,bool,uint8):(uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(level)),
        ethereum.Value.fromBoolean(isGenesis),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(project)),
      ],
    );

    return result[0].toI32();
  }

  try_getProjectsQuantity(
    level: i32,
    isGenesis: boolean,
    project: i32,
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getProjectsQuantity",
      "getProjectsQuantity(uint16,bool,uint8):(uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(level)),
        ethereum.Value.fromBoolean(isGenesis),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(project)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getPromotionalPID(): i32 {
    let result = super.call(
      "getPromotionalPID",
      "getPromotionalPID():(uint16)",
      [],
    );

    return result[0].toI32();
  }

  try_getPromotionalPID(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getPromotionalPID",
      "getPromotionalPID():(uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTotalProjectTypes(): i32 {
    let result = super.call(
      "getTotalProjectTypes",
      "getTotalProjectTypes():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_getTotalProjectTypes(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getTotalProjectTypes",
      "getTotalProjectTypes():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getVestingContract(): Address {
    let result = super.call(
      "getVestingContract",
      "getVestingContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getVestingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVestingContract",
      "getVestingContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ActivateNftDataCall extends ethereum.Call {
  get inputs(): ActivateNftDataCall__Inputs {
    return new ActivateNftDataCall__Inputs(this);
  }

  get outputs(): ActivateNftDataCall__Outputs {
    return new ActivateNftDataCall__Outputs(this);
  }
}

export class ActivateNftDataCall__Inputs {
  _call: ActivateNftDataCall;

  constructor(call: ActivateNftDataCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActivateNftDataCall__Outputs {
  _call: ActivateNftDataCall;

  constructor(call: ActivateNftDataCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get vestingContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get promotionalVestingPID(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get maxLevel(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get totalProjectTypes(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintAndSetNftDataCall extends ethereum.Call {
  get inputs(): MintAndSetNftDataCall__Inputs {
    return new MintAndSetNftDataCall__Inputs(this);
  }

  get outputs(): MintAndSetNftDataCall__Outputs {
    return new MintAndSetNftDataCall__Outputs(this);
  }
}

export class MintAndSetNftDataCall__Inputs {
  _call: MintAndSetNftDataCall;

  constructor(call: MintAndSetNftDataCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get level(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get isGenesis(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class MintAndSetNftDataCall__Outputs {
  _call: MintAndSetNftDataCall;

  constructor(call: MintAndSetNftDataCall) {
    this._call = call;
  }
}

export class MintAndUpdateNftDataCall extends ethereum.Call {
  get inputs(): MintAndUpdateNftDataCall__Inputs {
    return new MintAndUpdateNftDataCall__Inputs(this);
  }

  get outputs(): MintAndUpdateNftDataCall__Outputs {
    return new MintAndUpdateNftDataCall__Outputs(this);
  }
}

export class MintAndUpdateNftDataCall__Inputs {
  _call: MintAndUpdateNftDataCall;

  constructor(call: MintAndUpdateNftDataCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oldTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newLevel(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class MintAndUpdateNftDataCall__Outputs {
  _call: MintAndUpdateNftDataCall;

  constructor(call: MintAndUpdateNftDataCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get level(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get isGenesis(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetLevelDataCall extends ethereum.Call {
  get inputs(): SetLevelDataCall__Inputs {
    return new SetLevelDataCall__Inputs(this);
  }

  get outputs(): SetLevelDataCall__Outputs {
    return new SetLevelDataCall__Outputs(this);
  }
}

export class SetLevelDataCall__Inputs {
  _call: SetLevelDataCall;

  constructor(call: SetLevelDataCall) {
    this._call = call;
  }

  get level(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get isGenesis(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get vestingRewards(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get lifecycleDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get extensionDuration(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get allocationPerProject(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get supplyCap(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get baseURI(): string {
    return this._call.inputValues[8].value.toString();
  }
}

export class SetLevelDataCall__Outputs {
  _call: SetLevelDataCall;

  constructor(call: SetLevelDataCall) {
    this._call = call;
  }
}

export class SetMaxLevelCall extends ethereum.Call {
  get inputs(): SetMaxLevelCall__Inputs {
    return new SetMaxLevelCall__Inputs(this);
  }

  get outputs(): SetMaxLevelCall__Outputs {
    return new SetMaxLevelCall__Outputs(this);
  }
}

export class SetMaxLevelCall__Inputs {
  _call: SetMaxLevelCall;

  constructor(call: SetMaxLevelCall) {
    this._call = call;
  }

  get maxLevel(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetMaxLevelCall__Outputs {
  _call: SetMaxLevelCall;

  constructor(call: SetMaxLevelCall) {
    this._call = call;
  }
}

export class SetMultipleProjectsQuantityCall extends ethereum.Call {
  get inputs(): SetMultipleProjectsQuantityCall__Inputs {
    return new SetMultipleProjectsQuantityCall__Inputs(this);
  }

  get outputs(): SetMultipleProjectsQuantityCall__Outputs {
    return new SetMultipleProjectsQuantityCall__Outputs(this);
  }
}

export class SetMultipleProjectsQuantityCall__Inputs {
  _call: SetMultipleProjectsQuantityCall;

  constructor(call: SetMultipleProjectsQuantityCall) {
    this._call = call;
  }

  get isGenesis(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get project(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get quantities(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class SetMultipleProjectsQuantityCall__Outputs {
  _call: SetMultipleProjectsQuantityCall;

  constructor(call: SetMultipleProjectsQuantityCall) {
    this._call = call;
  }
}

export class SetNftDataCall extends ethereum.Call {
  get inputs(): SetNftDataCall__Inputs {
    return new SetNftDataCall__Inputs(this);
  }

  get outputs(): SetNftDataCall__Outputs {
    return new SetNftDataCall__Outputs(this);
  }
}

export class SetNftDataCall__Inputs {
  _call: SetNftDataCall;

  constructor(call: SetNftDataCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get level(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get isGenesis(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get activityType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get activityEndTimestamp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get extendedActivityEndTimestamp(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SetNftDataCall__Outputs {
  _call: SetNftDataCall;

  constructor(call: SetNftDataCall) {
    this._call = call;
  }
}

export class SetProjectsQuantityCall extends ethereum.Call {
  get inputs(): SetProjectsQuantityCall__Inputs {
    return new SetProjectsQuantityCall__Inputs(this);
  }

  get outputs(): SetProjectsQuantityCall__Outputs {
    return new SetProjectsQuantityCall__Outputs(this);
  }
}

export class SetProjectsQuantityCall__Inputs {
  _call: SetProjectsQuantityCall;

  constructor(call: SetProjectsQuantityCall) {
    this._call = call;
  }

  get level(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get isGenesis(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get project(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get quantity(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class SetProjectsQuantityCall__Outputs {
  _call: SetProjectsQuantityCall;

  constructor(call: SetProjectsQuantityCall) {
    this._call = call;
  }
}

export class SetPromotionalVestingPIDCall extends ethereum.Call {
  get inputs(): SetPromotionalVestingPIDCall__Inputs {
    return new SetPromotionalVestingPIDCall__Inputs(this);
  }

  get outputs(): SetPromotionalVestingPIDCall__Outputs {
    return new SetPromotionalVestingPIDCall__Outputs(this);
  }
}

export class SetPromotionalVestingPIDCall__Inputs {
  _call: SetPromotionalVestingPIDCall;

  constructor(call: SetPromotionalVestingPIDCall) {
    this._call = call;
  }

  get pid(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetPromotionalVestingPIDCall__Outputs {
  _call: SetPromotionalVestingPIDCall;

  constructor(call: SetPromotionalVestingPIDCall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class SetTotalProjectTypesCall extends ethereum.Call {
  get inputs(): SetTotalProjectTypesCall__Inputs {
    return new SetTotalProjectTypesCall__Inputs(this);
  }

  get outputs(): SetTotalProjectTypesCall__Outputs {
    return new SetTotalProjectTypesCall__Outputs(this);
  }
}

export class SetTotalProjectTypesCall__Inputs {
  _call: SetTotalProjectTypesCall;

  constructor(call: SetTotalProjectTypesCall) {
    this._call = call;
  }

  get newCount(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetTotalProjectTypesCall__Outputs {
  _call: SetTotalProjectTypesCall;

  constructor(call: SetTotalProjectTypesCall) {
    this._call = call;
  }
}

export class SetVestingContractCall extends ethereum.Call {
  get inputs(): SetVestingContractCall__Inputs {
    return new SetVestingContractCall__Inputs(this);
  }

  get outputs(): SetVestingContractCall__Outputs {
    return new SetVestingContractCall__Outputs(this);
  }
}

export class SetVestingContractCall__Inputs {
  _call: SetVestingContractCall;

  constructor(call: SetVestingContractCall) {
    this._call = call;
  }

  get newContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVestingContractCall__Outputs {
  _call: SetVestingContractCall;

  constructor(call: SetVestingContractCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
